// <auto-generated />
using System;
using System.Collections.Generic;
using GeoDataService.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GeoDataService.Infrastructure.Migrations
{
    [DbContext(typeof(GeoDataDbContext))]
    [Migration("20251024215447_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GeoDataService.Domain.Entities.GameMatch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LoserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlayerAId")
                        .HasColumnType("uuid");

                    b.Property<int>("PlayerATotalPoints")
                        .HasColumnType("integer");

                    b.Property<Guid>("PlayerBId")
                        .HasColumnType("uuid");

                    b.Property<int>("PlayerBTotalPoints")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("WinnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("IsCompleted");

                    b.HasIndex("PlayerAId");

                    b.HasIndex("PlayerBId");

                    b.HasIndex("StartedAt");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("GeoDataService.Domain.Entities.GameRound", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MatchId")
                        .HasColumnType("uuid");

                    b.Property<double?>("PlayerADistance")
                        .HasColumnType("double precision");

                    b.Property<Guid>("PlayerAId")
                        .HasColumnType("uuid");

                    b.Property<int?>("PlayerAPoints")
                        .HasColumnType("integer");

                    b.Property<double?>("PlayerBDistance")
                        .HasColumnType("double precision");

                    b.Property<Guid>("PlayerBId")
                        .HasColumnType("uuid");

                    b.Property<int?>("PlayerBPoints")
                        .HasColumnType("integer");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("MatchId");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("GeoDataService.Domain.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double?>("AveragePoints")
                        .HasColumnType("double precision");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DifficultyRating")
                        .HasColumnType("integer");

                    b.Property<int?>("Heading")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("Pitch")
                        .HasColumnType("integer");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.PrimitiveCollection<List<string>>("Tags")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasDefaultValue(new List<string>());

                    b.Property<int>("TimesUsed")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Country");

                    b.HasIndex("IsActive");

                    b.HasIndex("Region");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("GeoDataService.Domain.Entities.PlayerStats", b =>
                {
                    b.Property<Guid>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("AverageDistanceErrorKm")
                        .HasColumnType("double precision");

                    b.Property<double>("AveragePointsPerRound")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Draws")
                        .HasColumnType("integer");

                    b.Property<int>("HighestScore")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastMatchAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Losses")
                        .HasColumnType("integer");

                    b.Property<int>("RankingPoints")
                        .HasColumnType("integer");

                    b.Property<double>("TotalDistanceErrorKm")
                        .HasColumnType("double precision");

                    b.Property<int>("TotalMatches")
                        .HasColumnType("integer");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("integer");

                    b.Property<int>("TotalRoundsPlayed")
                        .HasColumnType("integer");

                    b.Property<int>("Wins")
                        .HasColumnType("integer");

                    b.HasKey("PlayerId");

                    b.HasIndex("LastMatchAt");

                    b.HasIndex("RankingPoints")
                        .IsDescending();

                    b.ToTable("PlayerStats");
                });

            modelBuilder.Entity("GeoDataService.Domain.Entities.GameRound", b =>
                {
                    b.HasOne("GeoDataService.Domain.Entities.GameMatch", null)
                        .WithMany("Rounds")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("GeoDataService.Domain.ValueObjects.Coordinate", "CorrectAnswer", b1 =>
                        {
                            b1.Property<Guid>("GameRoundId")
                                .HasColumnType("uuid");

                            b1.Property<double>("X")
                                .HasColumnType("double precision")
                                .HasColumnName("CorrectAnswerLatitude");

                            b1.Property<double>("Y")
                                .HasColumnType("double precision")
                                .HasColumnName("CorrectAnswerLongitude");

                            b1.HasKey("GameRoundId");

                            b1.ToTable("Rounds");

                            b1.WithOwner()
                                .HasForeignKey("GameRoundId");
                        });

                    b.OwnsOne("GeoDataService.Domain.ValueObjects.Coordinate", "PlayerAGuess", b1 =>
                        {
                            b1.Property<Guid>("GameRoundId")
                                .HasColumnType("uuid");

                            b1.Property<double>("X")
                                .HasColumnType("double precision")
                                .HasColumnName("PlayerAGuessLatitude");

                            b1.Property<double>("Y")
                                .HasColumnType("double precision")
                                .HasColumnName("PlayerAGuessLongitude");

                            b1.HasKey("GameRoundId");

                            b1.ToTable("Rounds");

                            b1.WithOwner()
                                .HasForeignKey("GameRoundId");
                        });

                    b.OwnsOne("GeoDataService.Domain.ValueObjects.Coordinate", "PlayerBGuess", b1 =>
                        {
                            b1.Property<Guid>("GameRoundId")
                                .HasColumnType("uuid");

                            b1.Property<double>("X")
                                .HasColumnType("double precision")
                                .HasColumnName("PlayerBGuessLatitude");

                            b1.Property<double>("Y")
                                .HasColumnType("double precision")
                                .HasColumnName("PlayerBGuessLongitude");

                            b1.HasKey("GameRoundId");

                            b1.ToTable("Rounds");

                            b1.WithOwner()
                                .HasForeignKey("GameRoundId");
                        });

                    b.Navigation("CorrectAnswer")
                        .IsRequired();

                    b.Navigation("PlayerAGuess");

                    b.Navigation("PlayerBGuess");
                });

            modelBuilder.Entity("GeoDataService.Domain.Entities.Location", b =>
                {
                    b.OwnsOne("GeoDataService.Domain.ValueObjects.Coordinate", "Coordinate", b1 =>
                        {
                            b1.Property<Guid>("LocationId")
                                .HasColumnType("uuid");

                            b1.Property<double>("X")
                                .HasColumnType("double precision")
                                .HasColumnName("Latitude");

                            b1.Property<double>("Y")
                                .HasColumnType("double precision")
                                .HasColumnName("Longitude");

                            b1.HasKey("LocationId");

                            b1.ToTable("Locations");

                            b1.WithOwner()
                                .HasForeignKey("LocationId");
                        });

                    b.Navigation("Coordinate")
                        .IsRequired();
                });

            modelBuilder.Entity("GeoDataService.Domain.Entities.GameMatch", b =>
                {
                    b.Navigation("Rounds");
                });
#pragma warning restore 612, 618
        }
    }
}
